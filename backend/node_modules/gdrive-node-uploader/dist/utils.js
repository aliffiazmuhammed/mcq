"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findExistingFileId = exports.getFileStats = exports.convertTodirectDownloadUrl = exports.formatDate = exports.makeFolderPublic = exports.validateFileIdOrUrl = exports.extractFileIdFromUrl = exports.makeFilePublic = exports.getFileDownloadUrl = exports.getAuthClient = void 0;
const path_1 = __importDefault(require("path"));
const dotenv_1 = __importDefault(require("dotenv"));
const googleapis_1 = require("googleapis");
dotenv_1.default.config();
let authClient = null;
const getAuthClient = (auth) => __awaiter(void 0, void 0, void 0, function* () {
    if (auth) {
        return auth;
    }
    if (authClient) {
        return authClient;
    }
    const keyFile = process.env.SERVICE_ACCOUNT_KEY_FILE;
    const serviceAccountJson = process.env.SERVICE_ACCOUNT_JSON;
    if (!keyFile && !serviceAccountJson) {
        throw new Error('Service account key file path or SERVICE_ACCOUNT_JSON is not defined.');
    }
    const googleAuth = new googleapis_1.google.auth.GoogleAuth(Object.assign(Object.assign({}, (keyFile ? { keyFile: keyFile } : { credentials: JSON.parse(serviceAccountJson) })), { scopes: ['https://www.googleapis.com/auth/drive.file', 'https://www.googleapis.com/auth/drive'] }));
    authClient = (yield googleAuth.getClient());
    return authClient;
});
exports.getAuthClient = getAuthClient;
const getFileDownloadUrl = (_a) => __awaiter(void 0, [_a], void 0, function* ({ drive, fileId }) {
    const file = yield drive.files.get({
        fileId: fileId,
        fields: 'webViewLink'
    });
    return file.data.webViewLink;
});
exports.getFileDownloadUrl = getFileDownloadUrl;
const makeFilePublic = (_b) => __awaiter(void 0, [_b], void 0, function* ({ drive, fileId }) {
    yield drive.permissions.create({
        fileId: fileId,
        requestBody: {
            role: 'reader',
            type: 'anyone'
        }
    });
});
exports.makeFilePublic = makeFilePublic;
const extractFileIdFromUrl = ({ fileUrl }) => {
    const match = fileUrl.match(/\/d\/(.*?)\/|id=(.*?)(&|$)/);
    if (match) {
        return match[1] || match[2];
    }
    throw new Error('Invalid Google Drive URL');
};
exports.extractFileIdFromUrl = extractFileIdFromUrl;
const validateFileIdOrUrl = ({ fileId, fileUrl }) => {
    if (!fileId && !fileUrl) {
        throw new Error('File ID or URL must be provided.');
    }
    if (fileUrl) {
        return (0, exports.extractFileIdFromUrl)({ fileUrl });
    }
    return fileId;
};
exports.validateFileIdOrUrl = validateFileIdOrUrl;
const makeFolderPublic = (_c) => __awaiter(void 0, [_c], void 0, function* ({ drive, folderId }) {
    yield drive.permissions.create({
        fileId: folderId,
        requestBody: {
            role: 'reader',
            type: 'anyone'
        }
    });
});
exports.makeFolderPublic = makeFolderPublic;
const formatDate = (dateString) => {
    if (!dateString)
        return '';
    const date = new Date(dateString);
    return date.toLocaleString('en-US', { timeZone: 'UTC' });
};
exports.formatDate = formatDate;
// Utility function to convert to direct download link
function convertTodirectDownloadUrl(driveLink) {
    var _a;
    const fileId = (_a = driveLink.match(/\/d\/(.*?)\//)) === null || _a === void 0 ? void 0 : _a[1];
    if (!fileId) {
        throw new Error('Invalid Google Drive link');
    }
    return `https://drive.google.com/uc?export=download&id=${fileId}`;
}
exports.convertTodirectDownloadUrl = convertTodirectDownloadUrl;
const getFileStats = (drive, folderId, destinationPath) => __awaiter(void 0, void 0, void 0, function* () {
    const files = yield drive.files
        .list({
        q: `'${folderId}' in parents and trashed=false`,
        fields: 'files(id, name, mimeType, size, parents)'
    })
        .then((res) => res.data.files || []);
    const fileStats = [];
    for (const file of files) {
        const filePath = path_1.default.join(destinationPath, file.name);
        if (file.mimeType === 'application/vnd.google-apps.folder') {
            const subFolderStats = yield (0, exports.getFileStats)(drive, file.id, filePath);
            fileStats.push(...subFolderStats);
        }
        else {
            const downloadUrl = yield (0, exports.getFileDownloadUrl)({ drive, fileId: file.id });
            const directDownloadUrl = convertTodirectDownloadUrl(downloadUrl);
            fileStats.push({
                fileName: file.name,
                filePath: filePath,
                fileSize: parseInt(file.size || '0'),
                fileUrl: downloadUrl,
                fileType: path_1.default.extname(filePath).substring(1),
                downloadUrl: directDownloadUrl
            });
        }
    }
    return fileStats;
});
exports.getFileStats = getFileStats;
const findExistingFileId = (drive, name, parentFolderId) => __awaiter(void 0, void 0, void 0, function* () {
    const res = yield drive.files.list({
        q: `name='${name}' and '${parentFolderId}' in parents and trashed=false`,
        fields: 'files(id, name, parents, size, createdTime, modifiedTime, description)'
    });
    return res.data.files.length > 0 ? res.data.files[0].id : null;
});
exports.findExistingFileId = findExistingFileId;
//# sourceMappingURL=utils.js.map