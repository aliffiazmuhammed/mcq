"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.shareGoogleDriveDir = void 0;
const googleapis_1 = require("googleapis");
const utils_1 = require("./utils");
const shareFileOrFolder = (drive, fileId, email) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        yield drive.permissions.create({
            fileId,
            requestBody: {
                role: 'reader',
                type: 'user',
                emailAddress: email
            }
        });
    }
    catch (error) {
        console.error(`Error sharing file/folder ID: ${fileId}. Error: ${error.message}`);
    }
});
const shareAllFilesAndFolders = (drive, folderId, email) => __awaiter(void 0, void 0, void 0, function* () {
    // Share the current folder
    yield shareFileOrFolder(drive, folderId, email);
    // List all files and folders within the current folder
    let pageToken = null;
    do {
        const res = yield drive.files.list({
            q: `'${folderId}' in parents and trashed=false`,
            fields: 'nextPageToken, files(id, name, mimeType)',
            pageToken: pageToken || undefined
        });
        const files = res.data.files || [];
        for (const file of files) {
            if (file.mimeType === 'application/vnd.google-apps.folder') {
                // Recursively share the subfolder
                yield shareAllFilesAndFolders(drive, file.id, email);
            }
            else {
                // Share the file
                yield shareFileOrFolder(drive, file.id, email);
            }
        }
        pageToken = res.data.nextPageToken || null;
    } while (pageToken);
});
const shareGoogleDriveDir = (email) => __awaiter(void 0, void 0, void 0, function* () {
    const auth = yield (0, utils_1.getAuthClient)();
    const drive = googleapis_1.google.drive({ version: 'v3', auth });
    try {
        // Get the root folder ID of the service account's Google Drive
        const res = yield drive.files.get({
            fileId: 'root',
            fields: 'id, name'
        });
        const rootFolderId = res.data.id;
        // Log root folder information
        // Recursively share all files and folders starting from the root folder
        yield shareAllFilesAndFolders(drive, rootFolderId, email);
    }
    catch (error) {
        console.error(`Error sharing root folder: ${error.message}`);
    }
});
exports.shareGoogleDriveDir = shareGoogleDriveDir;
//# sourceMappingURL=shareGoogleDriveDir.js.map