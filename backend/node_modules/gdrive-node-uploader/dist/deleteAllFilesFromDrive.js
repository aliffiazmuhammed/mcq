"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteAllFilesFromDrive = void 0;
const googleapis_1 = require("googleapis");
const utils_1 = require("./utils");
const BATCH_SIZE = 10;
const deleteFileOrFolder = (drive, fileId, fileName) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        yield drive.files.delete({
            fileId
        });
    }
    catch (error) {
        console.error(`Error deleting file/folder: ${fileName} (ID: ${fileId}). Error: ${error.message}`);
    }
});
const deleteFilesInBatch = (drive, files) => __awaiter(void 0, void 0, void 0, function* () {
    const promises = files.map((file) => deleteFileOrFolder(drive, file.id, file.name));
    yield Promise.all(promises);
});
const deleteAllFilesAndFolders = (drive, folderId) => __awaiter(void 0, void 0, void 0, function* () {
    let pageToken = null;
    do {
        const res = yield drive.files.list({
            q: `'${folderId}' in parents and trashed=false`,
            fields: 'nextPageToken, files(id, name, mimeType)',
            pageToken: pageToken || undefined
        });
        const files = res.data.files || [];
        const folders = files.filter((file) => file.mimeType === 'application/vnd.google-apps.folder');
        const otherFiles = files.filter((file) => file.mimeType !== 'application/vnd.google-apps.folder');
        // Delete files in batches asynchronously
        for (let i = 0; i < otherFiles.length; i += BATCH_SIZE) {
            const batch = otherFiles.slice(i, i + BATCH_SIZE);
            yield deleteFilesInBatch(drive, batch);
        }
        // Recursively delete subfolders
        for (const folder of folders) {
            yield deleteAllFilesAndFolders(drive, folder.id);
            yield deleteFileOrFolder(drive, folder.id, folder.name);
        }
        pageToken = res.data.nextPageToken || null;
    } while (pageToken);
});
const deleteAllFilesFromDrive = (auth) => __awaiter(void 0, void 0, void 0, function* () {
    const authClient = auth || (yield (0, utils_1.getAuthClient)());
    const drive = googleapis_1.google.drive({ version: 'v3', auth: authClient });
    try {
        // Get the root folder ID of the service account's Google Drive
        const res = yield drive.files.get({
            fileId: 'root',
            fields: 'id, name'
        });
        const rootFolderId = res.data.id;
        // Recursively delete all files and folders starting from the root folder
        yield deleteAllFilesAndFolders(drive, rootFolderId);
    }
    catch (error) {
        console.error(`Error deleting files from root folder: ${error.message}`);
    }
});
exports.deleteAllFilesFromDrive = deleteAllFilesFromDrive;
//# sourceMappingURL=deleteAllFilesFromDrive.js.map