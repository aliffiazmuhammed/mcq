"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fileExists = void 0;
const googleapis_1 = require("googleapis");
const utils_1 = require("./utils");
const fileExists = (_a) => __awaiter(void 0, [_a], void 0, function* ({ fileId, fileUrl, fileName, auth }) {
    if (!fileId && !fileUrl && !fileName) {
        throw new Error('Either fileId, fileUrl, or fileName must be provided.');
    }
    const authClient = auth || (yield (0, utils_1.getAuthClient)());
    const drive = googleapis_1.google.drive({ version: 'v3', auth: authClient });
    let validatedFileId;
    if (fileId) {
        validatedFileId = fileId;
    }
    else if (fileUrl) {
        validatedFileId = (0, utils_1.validateFileIdOrUrl)({ fileUrl });
    }
    try {
        if (validatedFileId) {
            const res = yield drive.files.get({
                fileId: validatedFileId,
                fields: 'id, name, modifiedTime, webViewLink, size'
            });
            if (res.data) {
                return {
                    exists: true,
                    fileId: res.data.id,
                    fileName: res.data.name,
                    modifiedTime: res.data.modifiedTime,
                    fileUrl: res.data.webViewLink,
                    fileSize: res.data.size ? Number(res.data.size) : undefined,
                    message: 'File exists on Google Drive.'
                };
            }
            else {
                return { exists: false, message: 'File does not exist on Google Drive.' };
            }
        }
        else if (fileName) {
            const res = yield drive.files.list({
                q: `name='${fileName}' and trashed=false`,
                fields: 'files(id, name, modifiedTime, webViewLink, size)'
            });
            if (res.data.files && res.data.files.length > 0) {
                const file = res.data.files[0];
                return {
                    exists: true,
                    fileId: file.id,
                    fileName: file.name,
                    modifiedTime: file.modifiedTime,
                    fileUrl: file.webViewLink,
                    fileSize: file.size ? Number(file.size) : undefined,
                    message: 'File exists on Google Drive.'
                };
            }
            else {
                return { exists: false, message: 'File does not exist on Google Drive.' };
            }
        }
    }
    catch (error) {
        throw new Error(`Error checking file existence: ${error.message}`);
    }
});
exports.fileExists = fileExists;
//# sourceMappingURL=fileExists.js.map