"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fileStreamUpload = void 0;
const googleapis_1 = require("googleapis");
const stream_1 = require("stream");
const utils_1 = require("./utils");
const bufferToStream = (buffer) => {
    const readable = new stream_1.Readable();
    readable._read = () => { };
    readable.push(buffer);
    readable.push(null);
    return readable;
};
const findExistingFileId = (drive, name, parentFolderId) => __awaiter(void 0, void 0, void 0, function* () {
    const res = yield drive.files.list({
        q: `name='${name}' and '${parentFolderId}' in parents and trashed=false`,
        fields: 'files(id, name, parents, size, createdTime, modifiedTime, description)'
    });
    return res.data.files.length > 0 ? res.data.files[0] : null;
});
const fileStreamUpload = (_a) => __awaiter(void 0, [_a], void 0, function* ({ buffer, fileName, parentFolderId, auth }) {
    const authClient = auth || (yield (0, utils_1.getAuthClient)());
    const drive = googleapis_1.google.drive({ version: 'v3', auth: authClient });
    const fileSize = buffer.length;
    console.log(`Uploading file: ${fileName}, size: ${fileSize} bytes`);
    const existingFile = yield findExistingFileId(drive, fileName, parentFolderId);
    if (existingFile && Number(existingFile.size) === fileSize) {
        console.log(`File ${fileName} already exists with the same size. Skipping upload.`);
        const downloadUrl = yield (0, utils_1.getFileDownloadUrl)({ drive, fileId: existingFile.id });
        const directDownloadLink = (0, utils_1.convertTodirectDownloadUrl)(downloadUrl);
        return { status: true, fileId: existingFile.id, fileUrl: directDownloadLink, message: 'File already exists with the same size.' };
    }
    const fileMetadata = {
        name: fileName,
        parents: [parentFolderId]
    };
    const media = {
        mimeType: 'application/octet-stream',
        body: bufferToStream(buffer)
    };
    let res;
    try {
        if (existingFile) {
            res = yield drive.files.update({
                fileId: existingFile.id,
                requestBody: fileMetadata,
                media,
                fields: 'id'
            });
        }
        else {
            res = yield drive.files.create({
                requestBody: fileMetadata,
                media,
                fields: 'id'
            });
        }
        if (res.data.id) {
            yield (0, utils_1.makeFilePublic)({ drive, fileId: res.data.id });
            const downloadUrl = yield (0, utils_1.getFileDownloadUrl)({ drive, fileId: res.data.id });
            const directDownloadLink = (0, utils_1.convertTodirectDownloadUrl)(downloadUrl);
            console.log(`Uploaded file ${fileName} successfully.`);
            return { status: true, fileId: res.data.id, fileUrl: directDownloadLink, message: 'File uploaded successfully.' };
        }
        else {
            throw new Error('File ID is null or undefined.');
        }
    }
    catch (error) {
        console.error(`Error uploading file ${fileName}:`, error);
        return { status: false, message: `Error uploading file ${fileName}: ${error.message}` };
    }
});
exports.fileStreamUpload = fileStreamUpload;
//# sourceMappingURL=fileStreamUpload.js.map