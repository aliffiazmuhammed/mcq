"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.downloadFileFromGoogleDrive = void 0;
const googleapis_1 = require("googleapis");
const fs_1 = require("fs");
const utils_1 = require("./utils");
const downloadFileFromGoogleDrive = (_a) => __awaiter(void 0, [_a], void 0, function* ({ fileId, fileUrl, fileName, downloadPath, onProgress }) {
    const auth = yield (0, utils_1.getAuthClient)();
    const drive = googleapis_1.google.drive({ version: 'v3', auth });
    let validatedFileId;
    if (fileId) {
        validatedFileId = fileId;
    }
    else if (fileUrl) {
        validatedFileId = (0, utils_1.validateFileIdOrUrl)({ fileUrl });
    }
    else if (fileName) {
        const res = yield drive.files.list({
            q: `name='${fileName}' and trashed=false`,
            fields: 'files(id)'
        });
        if (res.data.files && res.data.files.length > 0) {
            validatedFileId = res.data.files[0].id;
        }
        else {
            throw new Error('File not found on Google Drive.');
        }
    }
    if (!validatedFileId) {
        throw new Error('Valid file ID could not be determined.');
    }
    downloadPath = downloadPath || process.env.DEFAULT_DOWNLOAD_PATH;
    if (!downloadPath) {
        throw new Error('Download path must be provided or set in DEFAULT_DOWNLOAD_PATH environment variable');
    }
    let status = false;
    let message = '';
    try {
        // Check if the file already exists and delete it
        try {
            yield fs_1.promises.access(downloadPath);
            yield fs_1.promises.unlink(downloadPath);
        }
        catch (error) {
            // File does not exist, no action needed
        }
        const dest = yield fs_1.promises.open(downloadPath, 'w');
        const res = yield drive.files.get({ fileId: validatedFileId, alt: 'media' }, { responseType: 'stream' });
        const totalSize = parseInt(res.headers['content-length'] || '0', 10);
        let downloadedSize = 0;
        res.data.on('data', (chunk) => {
            downloadedSize += chunk.length;
            if (onProgress) {
                onProgress((downloadedSize / totalSize) * 100);
            }
        });
        yield new Promise((resolve, reject) => {
            res.data
                .on('end', () => __awaiter(void 0, void 0, void 0, function* () {
                status = true;
                message = 'File downloaded successfully.';
                yield dest.close();
                resolve();
            }))
                .on('error', (err) => __awaiter(void 0, void 0, void 0, function* () {
                message = `Error downloading file: ${err.message}`;
                yield dest.close();
                reject(err);
            }))
                .pipe(dest.createWriteStream());
        });
    }
    catch (error) {
        message = `Error during file download: ${error.message}`;
    }
    return { status, message, downloadPath };
});
exports.downloadFileFromGoogleDrive = downloadFileFromGoogleDrive;
//# sourceMappingURL=fileDownload.js.map