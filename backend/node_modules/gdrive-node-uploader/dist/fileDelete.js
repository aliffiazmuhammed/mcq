"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.deleteFileFromGoogleDrive = void 0;
const googleapis_1 = require("googleapis");
const utils_1 = require("./utils");
const deleteFileFromGoogleDrive = (_a) => __awaiter(void 0, [_a], void 0, function* ({ fileId, fileUrl, fileName }) {
    const auth = yield (0, utils_1.getAuthClient)();
    const drive = googleapis_1.google.drive({ version: 'v3', auth });
    let validatedFileId;
    if (fileId) {
        validatedFileId = fileId;
    }
    else if (fileUrl) {
        validatedFileId = (0, utils_1.validateFileIdOrUrl)({ fileUrl });
    }
    else if (fileName) {
        try {
            const res = yield drive.files.list({
                q: `name='${fileName}' and trashed=false`,
                fields: 'files(id)'
            });
            if (res.data.files && res.data.files.length > 0) {
                validatedFileId = res.data.files[0].id;
            }
            else {
                return { status: false, message: 'File does not exist on Google Drive.' };
            }
        }
        catch (error) {
            return { status: false, message: `Error finding file by name: ${error.message}` };
        }
    }
    if (!validatedFileId) {
        return { status: false, message: 'File ID could not be determined.' };
    }
    let status = false;
    let message = '';
    try {
        yield drive.files.delete({ fileId: validatedFileId });
        status = true;
        message = 'File deleted successfully.';
    }
    catch (error) {
        message = `Error during file deletion: ${error.message}`;
    }
    return { status, message };
});
exports.deleteFileFromGoogleDrive = deleteFileFromGoogleDrive;
//# sourceMappingURL=fileDelete.js.map