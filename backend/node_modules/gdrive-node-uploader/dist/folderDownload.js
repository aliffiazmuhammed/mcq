"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.folderDownload = void 0;
const path_1 = __importDefault(require("path"));
const googleapis_1 = require("googleapis");
const fs_1 = require("fs");
const fs = __importStar(require("fs"));
const utils_1 = require("./utils");
const findFilesInFolder = (drive, folderId) => __awaiter(void 0, void 0, void 0, function* () {
    const res = yield drive.files.list({
        q: `'${folderId}' in parents and trashed=false`,
        fields: 'files(id, name, mimeType, size, parents)'
    });
    return res.data.files || [];
});
const fileExistsAndMatches = (filePath, expectedSize) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const stats = yield fs_1.promises.stat(filePath);
        return stats.size === expectedSize;
    }
    catch (err) {
        return false;
    }
});
const downloadFile = (drive, fileId, destinationPath, expectedSize) => __awaiter(void 0, void 0, void 0, function* () {
    if (yield fileExistsAndMatches(destinationPath, expectedSize)) {
        return;
    }
    const dest = fs.createWriteStream(destinationPath);
    const res = yield drive.files.get({ fileId, alt: 'media' }, { responseType: 'stream' });
    yield new Promise((resolve, reject) => {
        res.data
            .on('end', () => {
            resolve(true);
        })
            .on('error', (err) => {
            console.error('Error downloading file.', err);
            reject(err);
        })
            .pipe(dest);
    });
});
const downloadFolder = (drive, folderId, destinationPath) => __awaiter(void 0, void 0, void 0, function* () {
    const folderMetadata = yield drive.files.get({
        fileId: folderId,
        fields: 'id, name, createdTime, modifiedTime'
    });
    const folderName = folderMetadata.data.name;
    const localFolderPath = path_1.default.join(destinationPath, folderName);
    yield fs_1.promises.mkdir(localFolderPath, { recursive: true });
    const files = yield findFilesInFolder(drive, folderId);
    const fileStats = [];
    for (const file of files) {
        const filePath = path_1.default.join(localFolderPath, file.name);
        if (file.mimeType === 'application/vnd.google-apps.folder') {
            const subFolderStats = yield downloadFolder(drive, file.id, localFolderPath);
            fileStats.push(...subFolderStats);
        }
        else {
            yield downloadFile(drive, file.id, filePath, parseInt(file.size));
            const downloadUrl = yield (0, utils_1.getFileDownloadUrl)({ drive, fileId: file.id });
            const directDownloadUrl = (0, utils_1.convertTodirectDownloadUrl)(downloadUrl);
            fileStats.push({
                fileName: file.name,
                filePath: filePath,
                fileSize: parseInt(file.size),
                fileUrl: downloadUrl,
                fileType: path_1.default.extname(filePath).substring(1),
                downloadUrl: directDownloadUrl
            });
        }
    }
    return fileStats;
});
const findFolderIdByUrl = (drive, folderUrl) => __awaiter(void 0, void 0, void 0, function* () {
    const folderIdMatch = folderUrl.match(/[-\w]{25,}/);
    if (folderIdMatch) {
        return folderIdMatch[0];
    }
    throw new Error('Invalid folder URL');
});
const findFolderIdByName = (drive, folderName) => __awaiter(void 0, void 0, void 0, function* () {
    const res = yield drive.files.list({
        q: `name='${folderName}' and mimeType='application/vnd.google-apps.folder' and trashed=false`,
        fields: 'files(id, name)',
        spaces: 'drive'
    });
    if (res.data.files.length > 0) {
        return res.data.files[0].id;
    }
    throw new Error('Folder not found');
});
const folderDownload = (_a) => __awaiter(void 0, [_a], void 0, function* ({ folderId, folderUrl, folderName, destinationPath }) {
    const auth = yield (0, utils_1.getAuthClient)();
    const drive = googleapis_1.google.drive({ version: 'v3', auth });
    try {
        yield fs_1.promises.mkdir(destinationPath, { recursive: true });
        if (!folderId) {
            if (folderUrl) {
                folderId = yield findFolderIdByUrl(drive, folderUrl);
            }
            else if (folderName) {
                folderId = yield findFolderIdByName(drive, folderName);
            }
            else {
                throw new Error('No folder identifier provided');
            }
        }
        const fileStats = yield downloadFolder(drive, folderId, destinationPath);
        const folderMetadata = yield drive.files.get({
            fileId: folderId,
            fields: 'id, name, createdTime, modifiedTime'
        });
        const finalPath = path_1.default.join(destinationPath, folderMetadata.data.name);
        const folderUrlResult = `https://drive.google.com/drive/folders/${folderId}`;
        // Integrate getFileStats
        const stats = yield (0, utils_1.getFileStats)(drive, folderId, destinationPath);
        return {
            status: true,
            folderId: folderMetadata.data.id,
            folderUrl: folderUrlResult,
            folderName: folderMetadata.data.name,
            fileCount: fileStats.length,
            destPath: finalPath,
            createdTime: (0, utils_1.formatDate)(folderMetadata.data.createdTime),
            modifiedTime: (0, utils_1.formatDate)(folderMetadata.data.modifiedTime),
            message: 'Folder downloaded successfully',
            fileStats: stats
        };
    }
    catch (error) {
        console.error(`Error during folder download: ${error.message}`);
        return {
            status: false,
            folderId: '',
            folderUrl: '',
            folderName: '',
            fileCount: 0,
            folderPath: '',
            createdTime: '',
            modifiedTime: '',
            message: `Error during folder download: ${error.message}`,
            fileStats: []
        };
    }
});
exports.folderDownload = folderDownload;
//# sourceMappingURL=folderDownload.js.map