"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.streamFileFromGoogleDrive = void 0;
const googleapis_1 = require("googleapis");
const utils_1 = require("./utils");
const streamFileFromGoogleDrive = (_a, res_1, onProgress_1) => __awaiter(void 0, [_a, res_1, onProgress_1], void 0, function* ({ fileId, fileUrl, fileName }, res, onProgress) {
    if (!fileId && !fileUrl && !fileName) {
        throw new Error('File ID, file URL, or file name must be provided.');
    }
    const auth = yield (0, utils_1.getAuthClient)();
    const drive = googleapis_1.google.drive({ version: 'v3', auth });
    let validatedFileId;
    if (fileId) {
        validatedFileId = fileId;
    }
    else if (fileUrl) {
        validatedFileId = (0, utils_1.validateFileIdOrUrl)({ fileUrl });
    }
    else if (fileName) {
        const driveResponse = yield drive.files.list({
            q: `name='${fileName}' and trashed=false`,
            fields: 'files(id)'
        });
        if (driveResponse.data.files && driveResponse.data.files.length > 0) {
            validatedFileId = driveResponse.data.files[0].id;
        }
        else {
            throw new Error('File not found on Google Drive.');
        }
    }
    if (!validatedFileId) {
        throw new Error('Valid file ID could not be determined.');
    }
    try {
        // Fetch file metadata to get the file name and extension
        const metadataResponse = yield drive.files.get({
            fileId: validatedFileId,
            fields: 'name'
        });
        const actualFileName = metadataResponse.data.name || 'download';
        const driveResponse = yield drive.files.get({ fileId: validatedFileId, alt: 'media' }, { responseType: 'stream' });
        const totalSize = parseInt(driveResponse.headers['content-length'] || '0', 10);
        let downloadedSize = 0;
        res.setHeader('Content-Disposition', `attachment; filename="${actualFileName}"`);
        driveResponse.data.on('data', (chunk) => {
            downloadedSize += chunk.length;
            if (onProgress) {
                onProgress((downloadedSize / totalSize) * 100);
            }
        });
        driveResponse.data.pipe(res).on('error', (err) => {
            res.status(500).send(`Error downloading file: ${err.message}`);
        });
    }
    catch (error) {
        throw new Error(`Error during file download: ${error.message}`);
    }
});
exports.streamFileFromGoogleDrive = streamFileFromGoogleDrive;
//# sourceMappingURL=fileStream.js.map