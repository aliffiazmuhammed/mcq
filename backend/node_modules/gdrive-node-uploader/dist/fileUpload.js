"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.uploadFileToGoogleDrive = void 0;
const path_1 = __importDefault(require("path"));
const googleapis_1 = require("googleapis");
const fs_1 = require("fs");
const utils_1 = require("./utils");
const uploadFileToGoogleDrive = (_a) => __awaiter(void 0, [_a], void 0, function* ({ filePath, onProgress, description }) {
    if (!filePath) {
        throw new Error('No file path provided for the file to upload.');
    }
    const auth = yield (0, utils_1.getAuthClient)();
    const drive = googleapis_1.google.drive({ version: 'v3', auth });
    const fileName = path_1.default.basename(filePath);
    let status = false;
    let message = '';
    let downloadUrl = '';
    try {
        const res = yield drive.files.list({
            q: `name='${fileName}' and trashed=false`,
            fields: 'files(id, name)'
        });
        const uploadFile = (fileId) => __awaiter(void 0, void 0, void 0, function* () {
            const fileMetadata = {
                name: fileName,
                description: description || 'No description provided.'
            };
            const fileSize = (yield fs_1.promises.stat(filePath)).size;
            const media = {
                mimeType: 'application/zip',
                body: (yield fs_1.promises.open(filePath, 'r')).createReadStream()
            };
            let request;
            if (fileId) {
                request = drive.files.update({ fileId, requestBody: fileMetadata, media });
            }
            else {
                request = drive.files.create({ requestBody: fileMetadata, media, fields: 'id' });
            }
            const res = yield new Promise((resolve, reject) => {
                let uploadedSize = 0;
                media.body.on('data', (chunk) => {
                    uploadedSize += chunk.length;
                    if (onProgress) {
                        onProgress((uploadedSize / fileSize) * 100);
                    }
                });
                request.then(resolve).catch(reject);
            });
            if (res.data.id) {
                yield (0, utils_1.makeFilePublic)({ drive, fileId: res.data.id });
                downloadUrl = yield (0, utils_1.getFileDownloadUrl)({ drive, fileId: res.data.id });
                status = true;
                message = fileId ? 'File updated successfully.' : 'File uploaded successfully.';
            }
            else {
                message = 'File ID is null or undefined.';
            }
        });
        if (res.data.files && res.data.files.length > 0 && res.data.files[0].id) {
            yield uploadFile(res.data.files[0].id);
        }
        else {
            yield uploadFile();
        }
    }
    catch (error) {
        message = `Error during file upload: ${error.message}`;
    }
    return { status, message, downloadUrl };
});
exports.uploadFileToGoogleDrive = uploadFileToGoogleDrive;
//# sourceMappingURL=fileUpload.js.map