"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const folderStreamUpload_1 = require("../folderStreamUpload");
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const folderPath = 'C:\\Users\\Aquataze\\Desktop\\discordChannelBot\\catalog\\community\\271445623641';
const readFilesFromDirectory = (directoryPath_1, ...args_1) => __awaiter(void 0, [directoryPath_1, ...args_1], void 0, function* (directoryPath, excludeExtensions = []) {
    const files = [];
    const readDirectory = (dirPath) => __awaiter(void 0, void 0, void 0, function* () {
        const entries = yield fs_1.default.promises.readdir(dirPath, { withFileTypes: true });
        for (const entry of entries) {
            const entryPath = path_1.default.join(dirPath, entry.name);
            const fileExtension = path_1.default.extname(entryPath).substring(1);
            if (excludeExtensions.includes(fileExtension)) {
                continue;
            }
            if (entry.isDirectory()) {
                yield readDirectory(entryPath);
            }
            else {
                try {
                    const fileBuffer = yield fs_1.default.promises.readFile(entryPath);
                    const relativePath = path_1.default.relative(directoryPath, entryPath);
                    files.push({ buffer: fileBuffer, name: relativePath });
                    console.log(`Read file: ${relativePath}`);
                }
                catch (error) {
                    console.error(`Error reading file ${entryPath}:`, error);
                }
            }
        }
    });
    yield readDirectory(directoryPath);
    return files;
});
const uploadFolderStreamExample = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const files = yield readFilesFromDirectory(folderPath);
        const parentFolderId = 'root'; // Replace with your Google Drive parent folder ID
        const folderName = path_1.default.basename(folderPath);
        if (files.length === 0) {
            console.log('No files found in directory.');
            return;
        }
        const result = yield (0, folderStreamUpload_1.folderStreamUpload)({
            files,
            folderName,
            parentFolderId,
            excludeExtensions: ['png', 'jpg'] // Example exclusions, adjust as necessary
        });
        console.log('Upload result:', result);
    }
    catch (error) {
        console.error('Error uploading folder:', error);
    }
});
uploadFolderStreamExample();
//# sourceMappingURL=uploadFolderStreamExample.js.map