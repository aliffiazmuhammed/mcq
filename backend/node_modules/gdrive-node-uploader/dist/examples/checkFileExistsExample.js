"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fileExists_1 = require("../fileExists");
const fileId = '1cdhMpL2dLfsHndmf4V9FgDn01QK_v_05';
const fileUrl = 'https://drive.google.com/file/d/1cdhMpL2dLfsHndmf4V9FgDn01QK_v_05/view?usp=drivesdk';
const fileName = 'manic-miners-latest.zip';
const checkFileExample = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        // Example using fileName
        const resultByName = yield (0, fileExists_1.fileExists)({ fileName });
        console.log(resultByName.message);
        if (resultByName.exists) {
            console.log(resultByName);
            console.log(`ID: ${resultByName.fileId}, Name: ${resultByName.fileName}, Last Modified: ${resultByName.modifiedTime}`);
        }
    }
    catch (error) {
        console.error(`Error: ${error.message}`);
    }
});
checkFileExample();
//# sourceMappingURL=checkFileExistsExample.js.map