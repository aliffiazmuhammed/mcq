"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const fileStreamUpload_1 = require("../fileStreamUpload");
// Example usage
const exampleUsage = () => __awaiter(void 0, void 0, void 0, function* () {
    const filePath = 'C:\\Users\\Aquataze\\Desktop\\discordChannelBot\\catalog\\community\\1193300291862\\catalog.json';
    const parentFolderId = 'root'; // Replace with your Google Drive parent folder ID
    const fileName = path_1.default.basename(filePath);
    try {
        const buffer = yield fs_1.default.promises.readFile(filePath);
        const result = yield (0, fileStreamUpload_1.fileStreamUpload)({ buffer, fileName, parentFolderId });
        console.log('Upload result:', result);
    }
    catch (error) {
        console.error('Error reading file or uploading:', error);
    }
});
exampleUsage();
//# sourceMappingURL=singleFileStreamExample.js.map