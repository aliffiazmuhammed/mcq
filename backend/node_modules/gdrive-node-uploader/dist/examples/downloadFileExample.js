"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const progress_1 = __importDefault(require("progress"));
const fileDownload_1 = require("../fileDownload");
const fileId = '1HzMXbDSqbn_BNBdVeAOyHAeT1TltRDrz';
const fileUrl = 'https://drive.google.com/file/d/1cdhMpL2dLfsHndmf4V9FgDn01QK_v_05/view?usp=drivesdk';
const fileName = 'manic-miners-latest.zip';
const baseDir = path_1.default.resolve(__dirname, '..', '..');
const downloadPath = path_1.default.join(baseDir, 'example_archive.zip');
const downloadFileExample = () => __awaiter(void 0, void 0, void 0, function* () {
    try {
        const downloadProgressBar = new progress_1.default('Downloading [:bar] :percent :etas', {
            total: 100,
            width: 40,
            complete: '=',
            incomplete: ' '
        });
        // Example using fileName
        const resultByName = yield (0, fileDownload_1.downloadFileFromGoogleDrive)({
            fileName,
            downloadPath,
            onProgress: (progress) => downloadProgressBar.update(progress / 100)
        });
        console.log(resultByName);
        console.log('\n' + resultByName.message);
    }
    catch (error) {
        console.error(`Error: ${error.message}`);
    }
});
downloadFileExample();
//# sourceMappingURL=downloadFileExample.js.map